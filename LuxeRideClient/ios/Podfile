# Resolve react_native_pods.rb with node to allow for hoisting
require Pod::Executable.execute_command('node', ['-p',
  'require.resolve(
    "react-native/scripts/react_native_pods.rb",
    {paths: [process.argv[1]]},
  )', __dir__]).strip

platform :ios, '13.4'
prepare_react_native_project!

# Force modular headers globally to fix Firebase issue
use_modular_headers!

# Force specific versions to resolve conflicts
$RNFirebaseAsStaticFramework = true

target 'LuxeRideClient' do
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => false,
    :fabric_enabled => false,
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false
    )
    
    # Force deployment target and resolve all conflicts
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # Uniform deployment target
        config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.4'
        
        # C++ settings
        config.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
        config.build_settings['CLANG_CXX_LIBRARY'] = 'libc++'
        
        # Fix React Native Reanimated specific issues
        if target.name == 'RNReanimated' || target.name.include?('Reanimated')
          config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
          config.build_settings['DEFINES_MODULE'] = 'YES'
          config.build_settings['SWIFT_VERSION'] = '5.0'
          config.build_settings['OTHER_CPLUSPLUSFLAGS'] = [
            '$(inherited)',
            '-DFOLLY_NO_CONFIG',
            '-DFOLLY_MOBILE=1',
            '-DFOLLY_USE_LIBCPP=1',
            '-DFOLLY_CFG_NO_COROUTINES=1',
            '-DFOLLY_HAVE_CLOCK_GETTIME=1'
          ]
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = [
            '$(inherited)',
            'FOLLY_NO_CONFIG=1',
            'FOLLY_MOBILE=1',
            'FOLLY_USE_LIBCPP=1'
          ]
        end
        
        # Fix Firebase modular headers issue
        config.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
        config.build_settings['DEFINES_MODULE'] = 'YES'
        config.build_settings['SWIFT_VERSION'] = '5.0'
        
        # Other flags for stability
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] ||= []
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-DFOLLY_NO_CONFIG'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-DFOLLY_MOBILE=1'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-DFOLLY_USE_LIBCPP=1'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] << '-DFOLLY_CFG_NO_COROUTINES=1'
        
        # Suppress warnings that cause failures
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
        config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
        
        # Force modular headers for all targets
        config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
      end
    end
  end
end